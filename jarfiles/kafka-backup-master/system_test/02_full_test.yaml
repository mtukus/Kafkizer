# Test Description
#
# Objective:
# * Backup multiple partitions of different sizes with multiple consumers
# * Create new partitions while Kafka Backup is running
- name: coyote
  title: kafka-backup

- name: Setup Cluster to Backup
  entries:
    - name: Docker Compose Up
      timeout: 300s
      command: docker-compose up -d
    - name: Clean previous data
      command: docker run -v /tmp/kafka-backup/:/kafka-backup/ kafka-backup-dev:latest rm -rf "/kafka-backup/02_full_test/"
    - name: Wait for Kafka to get up
      command: docker logs to-backup-kafka 2>&1 | grep -q '\[KafkaServer id=1\] started'
      timeout: 30s

- name: Setup Tests
  entries:
    - name: Create Topics
      command: docker-compose exec -T to-backup-kafka bash -c '
        utils.py create_topic --topic backup-test-1partition --partitions 1 &&
        utils.py create_topic --topic backup-test-3partitions --partitions 3'
      timeout: 300s
    - name: Produce 300 messages, 10KiB each to each partition
      timeout: 300s
      command: docker-compose exec -T to-backup-kafka bash -c '
        utils.py produce_messages --topic backup-test-1partition --partition 0 --start_num 0 --count 300 &&

        utils.py produce_messages --topic backup-test-3partitions --partition 0 --start_num 0 --count 300 &&
        utils.py produce_messages --topic backup-test-3partitions --partition 1 --start_num 0 --count 300 &&
        utils.py produce_messages --topic backup-test-3partitions --partition 2 --start_num 0 --count 300'
    - name: Consume all messages with consumer-group `cg-3k`
      timeout: 300s
      command: docker-compose exec -T to-backup-kafka bash -c '
        utils.py consume_messages --topic backup-test-1partition --consumer_group cg-3k --count 300 &&
        utils.py consume_messages --topic backup-test-3partitions --consumer_group cg-3k --count 900'
    - name: Count Messages
      command: docker-compose exec -T to-backup-kafka
        utils.py count_messages
      stdout_has:
        - "backup-test-1partition 0: 300"
        - "backup-test-3partitions 0: 300"
        - "backup-test-3partitions 1: 300"
        - "backup-test-3partitions 2: 300"
    - name: Check Consumer Group cg-3k
      timeout: 300s
      command: docker-compose exec -T to-backup-kafka
          kafka-consumer-groups.sh --bootstrap-server localhost:9092 --describe --group cg-3k
      stdout_has: [
      'backup-test-1partition  0          300',
      'backup-test-3partitions 0          300',
      'backup-test-3partitions 1          300',
      'backup-test-3partitions 2          300']
    - name: Produce 200 messages
      timeout: 300s
      command: docker-compose exec -T to-backup-kafka bash -c '
        utils.py produce_messages --topic backup-test-1partition --partition 0 --start_num 300 --count 200 &&

        utils.py produce_messages --topic backup-test-3partitions --partition 0 --start_num 300 --count 200 &&
        utils.py produce_messages --topic backup-test-3partitions --partition 1 --start_num 300 --count 200 &&
        utils.py produce_messages --topic backup-test-3partitions --partition 2 --start_num 300 --count 200'
    - name: Consume all messages with consumer-group `cg-5k`
      timeout: 300s
      command: docker-compose exec -T to-backup-kafka bash -c '
        utils.py consume_messages --topic backup-test-1partition --consumer_group cg-5k --count 500 &&
        utils.py consume_messages --topic backup-test-3partitions --consumer_group cg-5k --count 1500'
    - name: Produce 100 more messages
      timeout: 300s
      command: docker-compose exec -T to-backup-kafka bash -c '
        utils.py produce_messages --topic backup-test-1partition --partition 0 --start_num 500 --count 100 &&

        utils.py produce_messages --topic backup-test-3partitions --partition 0 --start_num 500 --count 100 &&
        utils.py produce_messages --topic backup-test-3partitions --partition 1 --start_num 500 --count 100 &&
        utils.py produce_messages --topic backup-test-3partitions --partition 2 --start_num 500 --count 100'
- name: Start Kafka Backup
  entries:
    - name: Start Kafka Backup
      command: >
        docker run -d -v /tmp/kafka-backup/:/kafka-backup/ --net=system_test_to-backup --name to-backup --rm
        kafka-backup-dev:latest backup-standalone.sh --bootstrap-server to-backup-kafka:9092
        --target-dir /kafka-backup/02_full_test/ --topics-regex 'backup-test.*' --max-segment-size 10485760

- name: Create another topic and write some data to it
  entries:
    - name: Create Topic
      timeout: 300s
      command: docker-compose exec -T to-backup-kafka
        utils.py create_topic --topic backup-test-10partitions --partitions 10
    - name: Write data
      timeout: 300s
      command: |
        docker-compose exec -T to-backup-kafka bash -c '
          for i in $(seq 0 9) ; do
            utils.py produce_messages --topic backup-test-10partitions --partition $i --start_num 0 --count 500
          done
          utils.py produce_messages --topic backup-test-1partition --partition 0 --start_num 600 --count 1500'
    - name: Wait for kafka connect to detect the new topic
      command: >
        bash -c '
          echo "Expecting new directory for topic "
          for ((i=0;i<60;i++)); do
            docker exec to-backup [ -d /kafka-backup/02_full_test/backup-test-10partitions ] && break;
            echo "$i/60"
            sleep 10;
          done'
    - command: sleep 20
      nolog: true
    - name: Check For errors
      timeout: 300s
      command: docker exec to-backup curl -vs "http://localhost:8083/connectors/backup-sink/status"
      stderr_has: ["200 OK"]
      stdout_has: ["RUNNING"]
      stdout_not_has: ["FAILED"]

- name: Stop Cluster that was backed up
  entries:
    - name: Stop Kafka Backup
      command: docker kill to-backup
    - name: Docker Compose Down
      timeout: 300s
      command: docker-compose stop to-backup-kafka

- name: Restore
  entries:
    - name: Create Topic
      timeout: 300s
      command: docker-compose exec -T restore-to-kafka bash -c '
        utils.py create_topic --topic backup-test-1partition --partitions 1 &&
        utils.py create_topic --topic backup-test-3partitions --partitions 3 &&
        utils.py create_topic --topic backup-test-10partitions --partitions 10'
    - name: Run Kafka Restore
      command: >
        docker run -v /tmp/kafka-backup/:/kafka-backup/ --net=system_test_restore-to --name restore-to --rm
        kafka-backup-dev:latest restore-standalone.sh --bootstrap-server restore-to-kafka:9092
        --source-dir /kafka-backup/02_full_test/
        --topics 'backup-test-1partition,backup-test-3partitions,backup-test-10partitions'
      timeout: 60s
      stdout_has: ['All records read.']

- name: Verify Backup
  entries:
    - name: Verify Records of backup-test-1partition
      timeout: 300s
      command: docker-compose exec -T restore-to-kafka
          utils.py consume_verify_messages --topic backup-test-1partition --partition 0 --count 2100
    - name: Verify Records of backup-test-3partitions
      timeout: 300s
      command: |
        docker-compose exec -T restore-to-kafka bash -c '
          for i in $(seq 0 2) ; do
              utils.py consume_verify_messages --topic backup-test-3partitions --partition $i --count 600
          done'
    - name: Verify Records of backup-test-10partitions
      timeout: 300s
      command: |
        docker-compose exec -T restore-to-kafka bash -c '
          for i in $(seq 0 9) ; do
              utils.py consume_verify_messages --topic backup-test-10partitions --partition $i --count 500
          done'
    - name: Count Messages
      command: docker-compose exec -T restore-to-kafka
        utils.py count_messages
      stdout_has:
        - "backup-test-1partition 0: 2100"
        - "backup-test-3partitions 0: 600"
        - "backup-test-3partitions 1: 600"
        - "backup-test-3partitions 2: 600"
        - "backup-test-10partitions 0: 500"
        - "backup-test-10partitions 1: 500"
        - "backup-test-10partitions 2: 500"
        - "backup-test-10partitions 3: 500"
        - "backup-test-10partitions 4: 500"
        - "backup-test-10partitions 5: 500"
        - "backup-test-10partitions 6: 500"
        - "backup-test-10partitions 7: 500"
        - "backup-test-10partitions 8: 500"
        - "backup-test-10partitions 9: 500"
    - name: Check Consumer Group cg-3k
      timeout: 300s
      command: docker-compose exec -T restore-to-kafka
          kafka-consumer-groups.sh --bootstrap-server localhost:9092 --describe --group cg-3k
      stdout_has: [
      'backup-test-1partition  0          300',
      'backup-test-3partitions 0          300',
      'backup-test-3partitions 1          300',
      'backup-test-3partitions 2          300']
- name: Clean-up Containers
  entries:
    - name: Docker Compose Down
      command: docker-compose down
